# Logo ASCII pour CertiSign
LOGO_CERTISIGN = """
 ██████╗ ███████╗ ██████╗ ████████╗██╗ ███████╗ ██╗  ██████╗  ███╗   ██╗
██╔════╝ ██╔════╝ ██╔══██╗╚══██╔══╝██║ ██╔════╝ ██║ ██╔════╝  ████╗  ██║               
██║      █████╗   ██████╔╝   ██║   ██║ ███████╗ ██║ ██║ ████  ██╔██╗ ██║
██║      ██╔══╝   ██╔══██╗   ██║   ██║ ╚════██║ ██║ ██║   ██║ ██║╚██╗██║
╚██████╔ ███████╗ ██║  ██║   ██║   ██║ ███████║ ██║ ╚██████╔╝ ██║ ╚████║
 ╚═════╝ ╚══════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚══════╝ ╚═╝  ╚═════╝  ╚═╝  ╚═══╝
"""


curl -X POST 'http://localhost:8002/verify' \
  -F 'pfx_file=@/home/markup/Documents/mfepit.pfx' \
  -F 'password="@mfepit@87"' \
  -F 'txt_file=@/home/markup/Documents/test.txt'
  -F 'signature_b64="BRh73XscGBynvDAifr7Tbhpn5cbmbs/BGcGLv3m/uWtF6eNcR3eL/ST271jM+8chNSDDai/DmIaMi/PSdLx4u2TiDe5rGqmGQCc6W8VhvX6p0IFH4ekrWow+/3xR2A0wqd8yPKUWB4BqCmAFKOHmhsBfAdzJdWXDUowL33cP4qPxNLe7d2XdbmTP9+XqYcMuPwGYsHKfC+uDQmN9KFnN0uEBOaNV4giphwSM9thjOy2DcvpTQXgP2vyNmNzIMb4zaCQL4vG3YgaNccKpT27GzRW2Gt/v0vGHeCJt0pVoT5LeHimSTNXBdYDkSfciLeUb8dozsMFlhl//pt7Ef4l/Ag=="'

curl -X POST 'http://localhost:8002/verify' \
  -F 'pfx_file=@/home/markup/Documents/mfepit.pfx' \
  -F 'password="@mfepit@87"' \
  -F 'txt_file=@/home/markup/Documents/test.txt' \
  -F 'signature_b64="BRh73XscGBynvDAifr7Tbhpn5cbmbs/BGcGLv3m/uWtF6eNcR3eL/ST271jM+8chNSDDai/DmIaMi/PSdLx4u2TiDe5rGqmGQCc6W8VhvX6p0IFH4ekrWow+/3xR2A0wqd8yPKUWB4BqCmAFKOHmhsBfAdzJdWXDUowL33cP4qPxNLe7d2XdbmTP9+XqYcMuPwGYsHKfC+uDQmN9KFnN0uEBOaNV4giphwSM9thjOy2DcvpTQXgP2vyNmNzIMb4zaCQL4vG3YgaNccKpT27GzRW2Gt/v0vGHeCJt0pVoT5LeHimSTNXBdYDkSfciLeUb8dozsMFlhl//pt7Ef4l/Ag=="'











  from fastapi import FastAPI, File, UploadFile, Form
from signer import load_private_key, sign_text_file
from signer import load_public_key, verify_signature
import base64
import os
from fastapi.responses import FileResponse


app = FastAPI()

# Créer le répertoire s'il n'existe pas
signed_files_dir = "/home/markup/Documents/CertiSign/backend/fastapi/microservices/signature_document/signed_files"
os.makedirs(signed_files_dir, exist_ok=True)

@app.post("/sign", include_in_schema=False)
async def sign_document(
    pfx_file: UploadFile = File(...),
    password: str = Form(...),
    txt_file: UploadFile = File(...)
):
    """API pour signer un fichier TXT avec un certificat PFX"""
    try:
        # Lire le contenu des fichiers
        pfx_data = await pfx_file.read()
        txt_data = await txt_file.read()

        # Charger la clé privée
        private_key = load_private_key(pfx_data, password)
        if not private_key:
            return {"error": "Impossible de charger la clé privée."}

        # Signer le fichier
        signature = sign_text_file(txt_data, private_key)

        # Encoder la signature en Base64 pour affichage
        signature_b64 = base64.b64encode(signature).decode()

         # Nom du fichier signé basé sur le fichier original
        original_filename = txt_file.filename
        signed_filename = f"signed_{original_filename}"

        # Créer le chemin complet du fichier signé
        output_filepath = os.path.join(signed_files_dir, signed_filename)

        # Sauvegarder le fichier signé
        with open(output_filepath, "wb") as f:
            f.write(f"Signature réussie.\n\n{signature_b64}".encode())

        return {
            "message": "Fichier signé avec succès.",
            "signature": signature_b64,
            "file": output_filepath  # Renvoyer le chemin du fichier signé
        }

    except Exception as e:
        return {"error": str(e)}
    

@app.post("/verify")
async def verify_document(
    pfx_file: UploadFile = File(...),
    password: str = Form(...),
    txt_file: UploadFile = File(...),
    signature_b64: str = Form(...)
):
    """API pour vérifier la signature d'un fichier TXT avec un certificat PFX"""
    try:
        # Lire le contenu des fichiers
        pfx_data = await pfx_file.read()
        txt_data = await txt_file.read()

        # Charger la clé publique
        public_key = load_public_key(pfx_data, password)
        if not public_key:
            return {"error": "Impossible de charger la clé publique."}

        # Décoder la signature en Base64
        signature = base64.b64decode(signature_b64)

        # Vérifier la signature
        is_valid = verify_signature(txt_data, signature, public_key)

        if is_valid:
            return {"message": "La signature est valide."}
        else:
            return {"error": "La signature est invalide."}

    except Exception as e:
        return {"error": str(e)}
