import typer  # Biblioth√®que pour cr√©er des interfaces en ligne de commande (CLI)
import requests  # Permet d'envoyer des requ√™tes HTTP √† une API
import os  # Utilis√© pour v√©rifier l'existence d'un fichier ou d'un r√©pertoire
import getpass  # Permet de masquer l'entr√©e du mot de passe
import time  # Utilis√© pour la simulation du temps d'extraction
from rich.progress import Progress, BarColumn, TextColumn  # Rich est utilis√© pour afficher une barre de progression color√©e
from rich.console import Console  # Console pour afficher des √©l√©ments stylis√©s
from rich.panel import Panel  # Permet d'afficher une bo√Æte encadr√©e
from rich.text import Text  # Permet de styliser du texte

# Cr√©ation de l'application CLI avec Typer
app = typer.Typer()
console = Console()

# URL de l'API Gateway pour envoyer le certificat
GATEWAY_URL = "http://localhost:8000/gateway/cert_info/"  # Remplace par ton URL d'API

# Logo ASCII pour CertiSign
LOGO_CERTISIGN = """
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù
"""


# Afficher le logo stylis√© au d√©marrage
console.print(Panel.fit(Text(LOGO_CERTISIGN, style="cyan bold"), title="üîê CertiSign - Signez en un cli", style="blue"))


@app.command()
def send_cert():
    """
    Envoie un certificat PFX √† l'API Gateway et affiche les informations du certificat.
    """

    # Demander le chemin du certificat √† l'utilisateur
    cert_path = typer.prompt("üìÇ Entrez le chemin du fichier certificat PFX")

    # V√©rification que le chemin donn√© n'est pas un r√©pertoire
    if os.path.isdir(cert_path):
        typer.echo("‚ùå Erreur : Chemin invalide, c'est un r√©pertoire !")
        raise typer.Exit()  # Quitte le programme avec une erreur

    # V√©rification que le fichier existe bien
    if not os.path.isfile(cert_path):
        typer.echo("‚ùå Erreur : Fichier non trouv√© !")
        raise typer.Exit()  # Quitte le programme avec une erreur

    # Demander le mot de passe de mani√®re s√©curis√©e
    password = getpass.getpass("üîë Entrez le mot de passe du certificat : ")

    try:
        # Ouverture du fichier en mode lecture binaire
        with open(cert_path, 'rb') as file:
            files = {'file': file}  # Charge le fichier sous forme de donn√©es binaires
            data = {'password': password}  # Stocke le mot de passe pour l'envoyer avec la requ√™te

            # Affichage d'une barre de progression pour l'extraction du certificat
            with Progress(
                TextColumn("üîÑ Extraction en cours..."),  # Message affich√© √† l'√©cran
                BarColumn(),  # Affiche une barre de progression
                TextColumn("[green]{task.percentage:>3.0f}%")  # Affiche le pourcentage de progression en vert
            ) as progress:
                task = progress.add_task("Extracting", total=100)  # Ajoute une t√¢che avec un total de 100%

                # Simulation d'une extraction en 10 √©tapes
                for _ in range(10):
                    time.sleep(0.2)  # Pause de 0.2 secondes pour simuler le chargement
                    progress.update(task, advance=10)  # Augmente la progression de 10%

            # Message de succ√®s apr√®s extraction
            typer.echo("‚úÖ SUCC√àS : Extraction termin√©e !\n")

            # Envoi des donn√©es √† l'API Gateway
            response = requests.post(GATEWAY_URL, files=files, data=data, timeout=10)

        # V√©rification de la r√©ponse de l'API
        if response.status_code == 200:
            # R√©cup√©ration des informations du certificat sous forme de texte format√©
            cert_info = "\n".join([f"üîπ {key}: {value}" for key, value in response.json().items()])
            
            # Affichage des informations encadr√©es dans une bo√Æte verte
            console.print(Panel(cert_info, title="üîç Informations du certificat", style="green"))

        else:
            # Affiche l'erreur retourn√©e par l'API si le statut n'est pas 200
            typer.echo(f"‚ö†Ô∏è Erreur {response.status_code}: {response.text}")

    # Gestion des erreurs de connexion
    except requests.ConnectionError:
        typer.echo("üö® Erreur : Impossible de se connecter √† l'API Gateway.")

    # Gestion des erreurs de timeout
    except requests.Timeout:
        typer.echo("‚è≥ Erreur : La requ√™te a expir√©.")

    # Gestion des erreurs g√©n√©rales
    except Exception as e:
        typer.echo(f"‚ùå Erreur inattendue : {e}")

# Ex√©cution du programme en mode CLI
if __name__ == "__main__":
    app()
